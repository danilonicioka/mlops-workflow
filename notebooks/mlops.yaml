# PIPELINE DEFINITION
# Name: my-pipeline
# Inputs:
#    bucket_name: str
#    dvc_file_dir: str
#    dvc_file_name: str
#    dvc_remote_db_url: str
#    dvc_remote_name: str
#    github_cloned_dir: str
#    github_dvc_branch: str
#    github_main_branch: str
#    github_repo_url: str
#    github_token: str
#    github_username: str
#    k8s_api_token: str
#    kserve_namespace: str
#    kserve_svc_acc: str
#    last_accuracy_object_name: str
#    minio_access_key: str
#    minio_model_object_name: str
#    minio_secret_key: str
#    minio_url: str
#    model_epochs: int
#    model_lr: float
#    model_name: str
#    model_print_frequency_per_n_epochs: int
#    performance_factor: float
#    tmp_dir: str
#    tmp_file_last_acc: str
#    trigger_type: str
components:
  comp-model-serving:
    executorLabel: exec-model-serving
    inputDefinitions:
      parameters:
        bucket_name:
          parameterType: STRING
        kserve_namespace:
          parameterType: STRING
        kserve_svc_acc:
          parameterType: STRING
        model_name:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-model-serving:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_serving
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kserve==0.13.0'\
          \ 'kubernetes==30.1.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_serving(\n    # mar_gen_cond: Input[Artifact],\n    # cond_info:\
          \ Output[Metrics],\n    bucket_name: str,\n    model_name: str,\n    kserve_namespace:\
          \ str,\n    kserve_svc_acc: str\n):\n    # Create kserve instance\n    from\
          \ kubernetes import client \n    from kserve import KServeClient, constants,\
          \ V1beta1InferenceService, V1beta1InferenceServiceSpec, V1beta1PredictorSpec,\
          \ V1beta1TorchServeSpec\n    from datetime import datetime\n    import time\n\
          \n    # # exec if a new model was uploaded\n    # with open(mar_gen_cond.path)\
          \ as f:\n    #     up_model = f.read()\n\n    # # if up_model == '1':\n\
          \    # cond_info.log_metric(\"Inference Service\", \"Created/Updated\")\n\
          \n    #Inference server config\n    now = datetime.now()\n    kserve_version='v1beta1'\n\
          \    api_version = constants.KSERVE_GROUP + '/' + kserve_version\n\n   \
          \ # with open(model_uri.path) as f:\n    #     uri = f.read()\n    uri =\
          \ f's3://{bucket_name}'\n\n    isvc = V1beta1InferenceService(api_version=api_version,\n\
          \                                   kind=constants.KSERVE_KIND,\n      \
          \                             metadata=client.V1ObjectMeta(\n          \
          \                             name=model_name, namespace=kserve_namespace,\
          \ annotations={'sidecar.istio.io/inject':'false'}),\n                  \
          \                 spec=V1beta1InferenceServiceSpec(\n                  \
          \                 predictor=V1beta1PredictorSpec(\n                    \
          \                   service_account_name=kserve_svc_acc,\n             \
          \                          pytorch=(V1beta1TorchServeSpec(\n           \
          \                                storage_uri=uri))))\n    )\n\n    KServe\
          \ = KServeClient()\n\n    #replace old inference service with a new one\n\
          \    try:\n        KServe.delete(name=model_name, namespace=kserve_namespace)\n\
          \        print(\"Old model deleted\")\n    except:\n        print(\"Couldn't\
          \ delete old model\")\n    time.sleep(10)\n\n    KServe.create(isvc)\n \
          \   # else:\n    #     cond_info.log_metric(\"Inference Service\", \"Not\
          \ Created/Updated\")\n\n"
        image: python:3.11.9
pipelineInfo:
  name: my-pipeline
root:
  dag:
    tasks:
      model-serving:
        cachingOptions: {}
        componentRef:
          name: comp-model-serving
        inputs:
          parameters:
            bucket_name:
              componentInputParameter: bucket_name
            kserve_namespace:
              componentInputParameter: kserve_namespace
            kserve_svc_acc:
              componentInputParameter: kserve_svc_acc
            model_name:
              componentInputParameter: model_name
        taskInfo:
          name: model-serving
  inputDefinitions:
    parameters:
      bucket_name:
        parameterType: STRING
      dvc_file_dir:
        parameterType: STRING
      dvc_file_name:
        parameterType: STRING
      dvc_remote_db_url:
        parameterType: STRING
      dvc_remote_name:
        parameterType: STRING
      github_cloned_dir:
        parameterType: STRING
      github_dvc_branch:
        parameterType: STRING
      github_main_branch:
        parameterType: STRING
      github_repo_url:
        parameterType: STRING
      github_token:
        parameterType: STRING
      github_username:
        parameterType: STRING
      k8s_api_token:
        parameterType: STRING
      kserve_namespace:
        parameterType: STRING
      kserve_svc_acc:
        parameterType: STRING
      last_accuracy_object_name:
        parameterType: STRING
      minio_access_key:
        parameterType: STRING
      minio_model_object_name:
        parameterType: STRING
      minio_secret_key:
        parameterType: STRING
      minio_url:
        parameterType: STRING
      model_epochs:
        parameterType: NUMBER_INTEGER
      model_lr:
        parameterType: NUMBER_DOUBLE
      model_name:
        parameterType: STRING
      model_print_frequency_per_n_epochs:
        parameterType: NUMBER_INTEGER
      performance_factor:
        parameterType: NUMBER_DOUBLE
      tmp_dir:
        parameterType: STRING
      tmp_file_last_acc:
        parameterType: STRING
      trigger_type:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.11.0
